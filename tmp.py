import numpy as np
import matplotlib.pyplot as plt

def base_fig():
    path = './results/'
    CONTENT_C = '0.00010055007769230415 8.522869672113268e-05 0.00010387624008827845 7.618297052726153e-05 0.00010156462186338761 6.42219531029461e-05 0.00010205908448207672 6.368567731703483e-05 9.773603780604641e-05 8.226156710665924e-05 9.836101501448755e-05 8.285648288404144e-05 9.650614259774663e-05 8.053636819179377e-05 9.870291173811684e-05 8.126998400045028e-05 9.7722954323201e-05 7.779769469640943e-05 9.699737808538363e-05 6.258364411708365e-05 9.84726600240272e-05 3.469243691804139e-05 9.210961511335227e-05 5.1758497538473774e-05 9.896288640851037e-05 5.183052977904227e-05 9.542530964716158e-05 2.869860128483773e-05 9.349444574094541e-05 7.484738216777542e-06 9.549244598875743e-05 1.3635329353563904e-05 9.656915635411525e-05 1.8435583122865067e-05 9.32000974891762e-05 3.798491736187335e-06 9.660208953520334e-05 1.8521050173531296e-06 9.40267043679833e-05 2.064528942901372e-06 9.484934039545369e-05 3.1996115326541044e-06 9.329761935052338e-05 2.3249449117134655e-06 9.620460247852596e-05 2.0083590465948954e-06 9.551943028729183e-05'
    CONTENT_D = '9.175783034120325 11.778773415213408 9.319850545775646 11.961600867140534 9.299536664148816 11.720309268714523 9.166406531293442 11.245136743960689 9.029452573148493 11.37563720535935 9.309860790356565 11.183187115649218 9.228847664758884 10.895463788517077 9.025740624226152 11.004951145041355 9.206474484845053 11.39902760337622 9.226958044344574 11.012962212218671 9.161763178660657 11.33407655906398 9.294741323669669 11.4034307952321 9.655473116724686 11.611589467308207 9.1883710261545 11.289018834801155 9.361009618959296 10.908080218288427 9.37707573932566 11.101153901792987 9.58484996746263 11.271567446645593 9.5867429062175 9.786221862145016 9.506266722817667 9.376371773011714 9.512531311199556 9.274837657983038 9.509049538964126 9.679566650120957 9.179259187873026 9.412393413849895 9.477933912032535 9.561836438083652 9.545562841074275'
    CONTENT_E = '0.6694259301816384 0.7731783527169127 0.8689847703772049 0.8599558900026715 0.8947855495436257 0.8945293564462354 0.915620520203138 0.9110433201986392 0.928719422912738 0.9238284101187464 0.9401927519121992 0.9282159855829709 0.9511578111225555 0.9373750782061496 0.9602601312717078 0.944567491232858 0.9610732323905228 0.9512178627315184 0.9639880884397822 0.9547906415605933 0.9643462278927101 0.9583462242341861 0.9577536845649637 0.9606604571134018 0.9635302823028477 0.9618222004678939 0.9647454670984711 0.9620365667184821 0.9572947350352141 0.9610495132899877 0.9403488146158063 0.9644529803352578 0.9542807513136343 0.967700513442653 0.960100158622783 0.9681496864284208 0.9478153031740205 0.9699572484433965 0.9465693837949196 0.9738719368122103 0.9544718439762292 0.9767608914958292 0.9642008739102038 0.9792580196928325 0.9658691888276029 0.9812697770417421 0.967675071127075 0.9821808649200611'
    CONTENT_C = CONTENT_C.split(' ')
    CONTENT_D = CONTENT_D.split(' ')
    CONTENT_E = CONTENT_E.split(' ')

    SUMMARY_C = '9.949918767443546e-05 9.086375705756384e-05 0.00010149645906333637 8.200727023288796e-05 0.00010019261712490958 6.954160386336317e-05 9.906288102812538e-05 6.72088127477775e-05 9.718400363090506e-05 8.675558277821236e-05 0.00010079079883832222 8.862588841284713e-05 9.747964215810248e-05 8.894310031031248e-05 9.599946862036791e-05 9.086868653086026e-05 9.622423943273002e-05 8.241732348539989e-05 9.587895024860384e-05 6.73919723375505e-05 9.630499297666939e-05 3.723644126402484e-05 9.230109500929275e-05 5.6294983492866485e-05 9.358245950782423e-05 5.511857171666327e-05 9.239162343076303e-05 3.0917418520238914e-05 9.478384587306695e-05 7.739428236756635e-06 9.389241632247864e-05 1.426215524791556e-05 9.562134905135569e-05 1.9229602519715078e-05 9.131358979242604e-05 3.905272318380348e-06 9.307743504432195e-05 1.941086389619694e-06 9.425907969118228e-05 2.162544590744554e-06 9.170913551178975e-05 3.3490572364933884e-06 9.25298133471611e-05 2.4099323970565277e-06 9.513213822815743e-05 2.060395988672423e-06 9.533317966910768e-05'
    SUMMARY_D = '10.997758466775004 11.872689053799563 11.471652061846507 12.010387153788493 11.620681374405887 11.60678594994878 11.540024460151985 11.489730096112115 11.28521726715697 11.430120412585875 11.561182033305098 11.130968505741631 11.373034490280766 11.037422458118291 11.58367268154696 11.284912048824651 11.49849304076773 11.613225314069895 11.503251119735335 11.163820043990086 11.60884910423912 11.404659372564065 11.613363500877744 11.50074208150718 11.67982735764177 11.509837902120356 11.44222114991884 11.607800039785538 11.624633806936702 10.88055467719331 11.738393444105238 11.098306109663595 11.721450374802188 11.262301310917591 11.656902006498091 9.526138946453775 11.734385812060834 9.013932600278658 11.507132111214782 9.080489082416822 11.606067883979538 9.870643378234373 11.756917957826307 9.190933217771235 11.65139030899414 9.15156137979062 11.527062713026211'
    SUMMARY_E = '0.6872719879797211 0.8169014012353709 0.8873243670307465 0.8944063807439547 0.9109041555860691 0.9230696067098455 0.9306312281208897 0.9384379070133155 0.9429302347033283 0.9514374951479845 0.9553972544758278 0.9539495480135944 0.9661880329234871 0.9620673344043579 0.9740042930163655 0.9662456896111455 0.9736359868672997 0.9694244644421982 0.9752380671779796 0.9715700302132213 0.9748069256435679 0.975404550034539 0.9694444651384723 0.9759682390550799 0.9742678927893882 0.9763484123069899 0.9751423820244666 0.9770013260697104 0.9686606535869691 0.9761260258985306 0.9539373584666156 0.9779431188565607 0.9647648812852994 0.9800112536407981 0.970041758777353 0.9784754872497889 0.9586571519802489 0.980063856421788 0.9572460595544666 0.9823375567884116 0.9651871083486784 0.9850135848344692 0.9734120214492067 0.9866740305058039 0.9736519562277499 0.9873351383445576 0.9750111841138761 0.9887420212672453'
    SUMMARY_C = SUMMARY_C.split(' ')
    SUMMARY_D = SUMMARY_D.split(' ')
    SUMMARY_E = SUMMARY_E.split(' ')

    TITLE_C = '0.00010249007030399101 0.00010428304341576465 0.00010321194030492913 9.285241784367052e-05 0.0001006565967964288 7.95850542251643e-05 9.826168946981195e-05 7.659430067157831e-05 9.591143866113007e-05 9.933251274366406e-05 9.656528066559045e-05 9.879906591413796e-05 9.686389114507628e-05 0.00010061221467203547 9.430047314839346e-05 9.861370732880622e-05 9.83494622721532e-05 9.483112616117268e-05 9.704925211840365e-05 7.611571250085881e-05 9.653511136282799e-05 4.1122120869723556e-05 9.134219397880526e-05 6.294656852003151e-05 9.61239431122687e-05 6.136138244128074e-05 9.199260558676339e-05 3.4019618322718514e-05 9.285585302046224e-05 8.423943494998402e-06 9.246383914205037e-05 1.563618018975393e-05 9.387846806754667e-05 2.1252267499060482e-05 9.221359176158367e-05 4.3256097324061115e-06 9.387115694373859e-05 2.1215316381960955e-06 9.260210813276092e-05 2.3879244088122115e-06 9.068916389673756e-05 3.730026738396126e-06 9.205560338712135e-05 2.7038116060594954e-06 9.331567405529821e-05 2.284590154624972e-06 9.529627774416198e-05'
    TITLE_D = '12.551783271133267 12.107485869999465 13.041392885988879 12.38501362580163 13.042632054778613 12.150591934242085 12.884878870798715 12.042148296854624 12.755258721837361 11.938463972413313 12.786682911763696 11.874159240751071 12.789729833063856 11.424060041410627 12.824357647738633 11.648781043493534 12.895929223878113 12.055409425273371 12.86416499212312 11.471078353974244 12.94876273610903 11.432006383127934 12.95806752859068 11.925344153250826 12.919709104969701 12.051255327827912 12.874553755807712 11.786169050430026 12.86630020557291 10.909792135580481 12.890616669381465 11.275490107681888 12.881166488778904 11.331221425265912 12.885135018425116 9.83336784016796 13.03076606853955 9.202357693863922 12.944400099756587 8.866675692833903 12.938311369117782 9.041393004430386 12.949227676262446 9.03524852647846 13.04594348875843 9.00969808739477 12.923975934507306'
    TITLE_E = '0.6904815546500459 0.8151750730600626 0.8903572327492887 0.8875170136844788 0.9058218815973872 0.8980492142577617 0.9341560247708988 0.9314722710181457 0.9456845769883037 0.9510321135657567 0.956562490993383 0.9520653881148191 0.9673118812463704 0.9627854465936733 0.9734905614007713 0.9655515223735328 0.9725896662894221 0.9701220345649683 0.9742934274903379 0.9709309766380536 0.9735210658743446 0.9735052996095471 0.9677337023943214 0.9724286310608713 0.9716994534289891 0.972855213609525 0.9725286341553252 0.9747337107378536 0.9658954538054171 0.9729527670574807 0.9529157198437354 0.9755236704206488 0.9632176270141071 0.9775642555146921 0.9684766580620172 0.9790395272334663 0.9580520550478793 0.9802085857378137 0.9573986550264667 0.982749423255785 0.9657454745784035 0.9838183620384051 0.9725126770574477 0.9853454258375175 0.9725994997522375 0.9859544421729466 0.9734721641012892 0.9869628609511701'
    TITLE_C = TITLE_C.split(' ')
    TITLE_D = TITLE_D.split(' ')
    TITLE_E = TITLE_E.split(' ')

    CC = list(map(float, CONTENT_C))
    CD = list(map(float, CONTENT_D))
    CE = list(map(float, CONTENT_E))
    SC = list(map(float, SUMMARY_C))
    SD = list(map(float, SUMMARY_D))
    SE = list(map(float, SUMMARY_E))
    TC = list(map(float, TITLE_C))
    TD = list(map(float, TITLE_D))
    TE = list(map(float, TITLE_E))
    x = range(len(CC))

    fig = plt.figure()
    fig.set_size_inches(7.5, 5)

    plt.plot(x, CC, marker='+', color='tab:green', linewidth=1.5)
    plt.plot(x, SC, marker='v', linewidth=1.5, color='tab:blue', markersize=2)
    plt.plot(x, TC, marker='x', linewidth=1.5, color='tab:pink', markersize=2)
    # plt.title()
    plt.xlabel('Time')
    plt.ylabel('CScore')
    plt.legend(['Content', 'Summary', 'Title'], ncol=2)
    plt.savefig(path + 'TDF_C' + '.png')
    plt.show()

    fig = plt.figure()
    fig.set_size_inches(7.5, 5)
    plt.plot(x, CD, marker='+', color='tab:green', linewidth=1.5)
    plt.plot(x, SD, marker='v', linewidth=1.5, color='tab:blue', markersize=2)
    plt.plot(x, TD, marker='x', linewidth=1.5, color='tab:pink', markersize=2)
    plt.xlabel('Time')
    plt.ylabel('DScore')
    plt.legend(['Content', 'Summary', 'Title'], ncol=2, loc='upper right')
    plt.savefig(path + 'TDF_D' + '.png')
    plt.show()

    fig = plt.figure()
    fig.set_size_inches(7.5, 5)
    plt.plot(range(len(CC)+1), np.log(CE), marker='+', color='tab:green', linewidth=1.5)
    plt.plot(range(len(CC)+1), np.log(SE), marker='v', linewidth=1.5, color='tab:blue', markersize=2)
    plt.plot(range(len(CC)+1), np.log(TE), marker='x', linewidth=1.5, color='tab:pink', markersize=2)
    plt.xlabel('Time')
    plt.ylabel('RE (log)')
    plt.legend(['Content', 'Summary', 'Title'], ncol=2)
    plt.savefig(path + 'TDF_E' + '.png')
    plt.show()

# base_fig()


def ProAnti():
    filepath = 'results/01_pro/'
    readfiles = open(filepath+'pro-anti.txt', 'r')
    readlines = readfiles.readlines()
    i = 0
    PRO = []
    ANTI = []

    for i in range(len(readlines)):
        line = readlines[i]
        if 'pro' in line:
            for j in range(1, 5):
                i = i + 1
                line = readlines[i]
                line = line.strip('\n')
                line_list = line.split(' ')
                del line_list[0]
                # del line_list[-1]
                PRO.append([float(x) for x in line_list])
            i = i + 1
        elif 'anti' in line:
            for j in range(1, 5):
                i = i + 1
                line = readlines[i]

                line = line.strip('\n')
                line_list = line.split(' ')
                del line_list[0]
                # del line_list[-1]
                ANTI.append([float(x) for x in line_list])
            i = i + 1
    PRO = [x[:47] for x in PRO]
    ANTI = [x[:47] for x in ANTI]
    x = range(len(PRO[0]))

    methods = ['Pro', 'Anti']
    fig = plt.figure()
    fig.set_size_inches(7.5, 5)

    plt.plot(x, np.log(PRO[0]), marker='+', color='tab:green', linewidth=1.5)
    plt.plot(x, np.log(ANTI[0]), marker='v', linewidth=1.5, color='tab:blue', markersize=2)
    # plt.title()
    plt.xlabel('Time')
    plt.ylabel('CScore')
    plt.legend(methods, ncol=2)
    plt.savefig(filepath + 'Time_log' + '.png')
    plt.show()

    plt.plot(x, PRO[1], marker='+', color='tab:green', linewidth=1.5)
    plt.plot(x, ANTI[1], marker='v', linewidth=1.5, color='tab:blue', markersize=2)
    # plt.title()
    plt.xlabel('Time')
    plt.ylabel('CScore')
    plt.legend(methods, ncol=2)
    plt.savefig(filepath + 'common' + '.png')
    plt.show()

    fig = plt.figure()
    fig.set_size_inches(7.5, 5)
    plt.plot(x, PRO[2], marker='+', color='tab:green', linewidth=1.5)
    plt.plot(x, ANTI[2], marker='v', linewidth=1.5, color='tab:blue', markersize=2)
    plt.xlabel('Time')
    plt.ylabel('DScore')
    plt.legend(methods, ncol=2)
    plt.savefig(filepath + 'differ' + '.png')
    plt.show()

    fig = plt.figure()
    fig.set_size_inches(7.5, 5)
    plt.plot(x, np.log(PRO[3]), marker='+', color='tab:green', linewidth=1.5)
    plt.plot(x, np.log(ANTI[3]), marker='v', linewidth=1.5, color='tab:blue', markersize=2)
    plt.xlabel('Time')
    plt.ylabel('RE (log)')
    plt.legend(methods, ncol=2)
    plt.savefig(filepath + 'error_log' + '.png')
    plt.show()

ProAnti()
